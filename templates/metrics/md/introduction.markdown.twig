{% apply markdown_to_html %}


## Introduktion

"De fyra C:na" står för coverage, complexity, cohesion och coupling. När man pratar om coverage så är det ett mått på hur mycket av koden som man prövar med egna enhetstester. Otillräckligt med enhetstester kan innebära att man inte upptäcker när någon del i projektet slutar fungera som det ska. Ett exempel är att implementering av ny kod "krockar" med gammal kod. I detta projektet ligger code coverage på en relativt låg nivå, ca 20% enligt verktyget Scrutinizer.

Complexity är ett mått på hur många "självständiga cykler" som sker i en moduls flöde. För att koden ska bli så enkel som möjligt att testa och förså så vill vi ha så få sådana som möjligt. Operationer som if-, else- och switch-satser ökar graden av complexity. Ju högre grad av complexity vi har desto större chans är det att någonting i koden går sönder. I detta projekt det genomsnittliga värdet på cyclomatic complexity på 4.38 enligt verktyget PhpMetrics.

Cohesion och coupling är två begrepp som kan ses som varandras motsatser. Med cohesion beskriver vi hur väl en modul fokuserar på en uppgift. Ju mer metoderna används för att sköta "egna" uppgifter inom modulen, exempelvis returnera värdet på en property desto högre värde på cohesion får vi. Coupling är ett värde på det motsatta, nämligen hur mycket en modul interagerar med andra moduler. Ju fler anrop som görs för att hämta information från andra moduler desto högre värde på coupling får vi. Generellt önskar vi "loose cohesion" och "high coupling" i vår kod.

Med verktyget PhpMetrics kan man inte mäta cohesion men däremot coupling. Här är det inte särksilt förvånande att CardHand är den klass som används mest av andra klasser (6 st). Omvänt så är det kontrollerna som använder andra klasser mest, exempelvis CardController (7st). Controllers är till för att "knyta ihop" de olika verktygen som finns tillgängliga för att användas på webbsidan. Det är därför inte konstigt att det är de som får högst poäng i coupling.


{% endapply %}
