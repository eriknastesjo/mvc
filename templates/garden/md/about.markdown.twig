{% apply markdown_to_html %}


## Project idea

The idea behind this project is to make a simple garden-sale simulator. In the simulator the user can plant and grow different plants. There are different seeds to choose from and a watering can helps them grow. Additionally there are customers with specific orders. If the plants in the garden match the order the plants will be "sold" to the customer and disappear from the garden. Finally the actions are logged in a database. That way the user can view the history of planted seeds and sold plants.

The garden and the customer are in different "rooms". The user must be able to travel between the rooms. Every time the user plants or waters something the page will process the request and reload.

There is no real goal of the garden-sale simulator except having fun, experimenting a bit and making some fake money.


## Implementation

The web page was created with the framework Symphony. It's a set of tools to help with navigation and rendering of routes on a web page. The language used in Symphony is PHP for navigation and TWIG for rendering.

Several objects have also been created in PHP to hold and manipulate key information, most importantly the garden object. Further more ORM (Object Relation Mapping) Doctrine has been used to store some information kept in the garden object. The transfer of information from the garden object to the database happens during certain events, more specifically when a user is planting a seed or selling a plant.

On the front end Javascript and CSS has been used to style the pages. Javascript has also been used to change form events when the user clicks on a seed or the watering can tool.


## Documentation

<a href="docs/api/index.html">PhpDoc</a>,
<a href="https://github.com/eriknastesjo/mvc-report.git">Git rep</a>,
<a href="https://scrutinizer-ci.com/g/eriknastesjo/mvc-report/">Scrutinizer report</a>


## Code Quality

Keeping a high code quality has been an important part of this project. This priority has been targeted in different ways. First, the SRP (single-responsibility principle) has been kept in mind on both method- and module level. On method level it means that a method would sometimes have to be broken into two or more smaller methods to handle different parts of the process. For exampel the method sellAll() in Garden class first included code to reset object in addition to handle the price variables. Later this code was instead implemented in a separate method reset(). On module level the code was separated depending on its purpose. For example all the code that managed the database was first kept in the GardenController. Since this purpose was different than keeping track of routes and session variables the code was implemented in a separate Database class.

Another way to keep code quality high was to keep the volume and complexity low. The main way to keep the volume low was to separate a module into two or more smaller modules. This also worked to uphold the SRP as stated above. The complexity issue could sometimes be tackled in a similar way. Another way to tackle the complexity issue was to look for unnecessary if-statements. This could be done by using the tool phpmd that especially reacted to "else"-statements. Another great tool that was used is phpMetrics. An metrics analysis showed that average complexity increased by 0.23 units. This is probably due to some parts of the bode being difficult to break down in smaller parts. The relative system complexity was relativly high in GardenController (625 compared to next highest number 256) which could explain the result. Still the maintainability index (fig 1) was kept quite high despite implementing 10 new classes in the garden project with no new module lower than 70.


<p>
	<a href="img/gardenPhpMetrics.png"><img src="../../img/gardenPhpMetrics.png" class="img-vert metrics-img" alt="Representation of maintainability index and cyclomatic complexity from phpMetrics."></a>

	<figcaption>Fig 1. The size and color of the balls represents the maintainability index and cyclomatic complexity of the classes. Red means that maintainability index is under 70. The two red balls in this illustration represent classes created prior to the garden project.</figcaption>
</p>

Finally high code quality was maintained by keeping consistent and comprehensible variable and method names. This sounds simple but the hard part was to do it throughout different classes and methods. This sometimes meant to go through names in several modules when a name was no longer relevant. For example the garden was first meant to plant flowers and not vegetables. The "flower" apperead in several different modules both as variable name and as a part of method name. This was later changed to the word "plant".

## Additional info

"The Garden" is the end project of a 7.5 points programming course at Blekinge Technical University. The course focus has been on object oriented web technologies a.k.a. mvc (model-view-controller). If you want to see the whole result of the course you can click <a href="{{path("home")}}">here</a>.








{% endapply %}
